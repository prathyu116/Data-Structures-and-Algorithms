/*
https://takeuforward.org/data-structure/combination-sum-1/https://www.youtube.com/watch?v=Atr_z-JrMSI&list=PLrClazTqVpJkZSFk6mRw5e0BOtOG4-7El&index=7&t=1s
here we can pic an elemnt more than one timee

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
unique auyrikkanmm......for example [2,3,2] not possible
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.


#How to think recursively?
Whenever the problem is related to picking up elements from an array to form a combination, 
start thinking about the “pick and non-pick” approach.

var combinationSum = function(candidates, target) {
    let res = [];
    function dfs(i, total, arr) {
        if (total === target) return res.push([...arr]);
        if (i >= candidates.length || total > target) return;

        arr.push(candidates[i]);
        dfs(i, total + candidates[i], arr); //taking 
        arr.pop();
        dfs(i + 1, total, arr);  //not taking
    }
    dfs(0, 0, []);
    return res;
};

TC  exponential  
